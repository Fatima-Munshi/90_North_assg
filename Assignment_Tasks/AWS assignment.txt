//AWS lambda function to add two numbers

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import java.util.Map;

public class AddNumbersLambda implements RequestHandler<Map<String, Integer>, Map<String, Integer>> {
    @Override
    public Map<String, Integer> handleRequest(Map<String, Integer> event, Context context) {
        // Get the numbers from the event
        int number1 = event.getOrDefault("number1", 0);
        int number2 = event.getOrDefault("number2", 0);

        // Add the numbers
        int result = number1 + number2;

        // Return the result
        return Map.of("result", result);
    }
}

//AWS lambda function to store a document or PDF file in an S3 bucket. 

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.PutObjectRequest;
import java.io.InputStream;
import java.util.Map;

public class StoreDocumentLambda implements RequestHandler<Map<String, Object>, String> {

    private final AmazonS3 s3Client = AmazonS3ClientBuilder.standard().build();

    @Override
    public String handleRequest(Map<String, Object> event, Context context) {
        String bucketName = "your-bucket-name";
        String keyName = "your-document-name.pdf"; // Customize this to your needs

        try {
            InputStream fileContent = (InputStream) event.get("fileContent");

            // Upload the file to S3
            s3Client.putObject(new PutObjectRequest(bucketName, keyName, fileContent, null));

            return "File uploaded successfully!";
        } catch (Exception e) {
            context.getLogger().log("Error: " + e.getMessage());
            return "File upload failed!";
        }
    }
}

